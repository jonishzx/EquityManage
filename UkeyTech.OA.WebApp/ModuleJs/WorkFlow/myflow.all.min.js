function ValidateRect(c, b) { if (c == "StartNode") { for (var a in b) { if (b[a].uiobject().type == "StartNode") { alert("工作流只能有一个开始节点"); return false } } } return true } function ValidatePath(e, f, g, j) { var d = true; var b = e.uiobject().type; var h = f.uiobject().type; var c = e.uiobject().props.Id.value; var i = f.uiobject().props.Id.value; if ((b == "EndNode" && h == "StartNode") || (b == "StartNode" && h == "EndNode")) { alert("结束节点不能直接连接到开始节点"); d = false } else { if (b == "Synchronizer" && h == "Synchronizer") { alert("转发点不能直接连接到转发点,你需要在他们之间添加活动"); d = false } else { if (b == "Activity" && h == "Activity") { alert("活动不能直接连接到活动,你需要在他们之间添加转发点"); d = false } else { if ((b == "Synchronizer" && h == "EndNode") || (b == "EndNode" && h == "Synchronizer") || (b == "StartNode" && h == "Synchronizer") || (b == "Synchronizer" && h == "StartNode")) { alert("转发点不能与结束节点或是开始节点相连,只有活动能与开始节点或结束节点相连"); d = false } else { if (b == "Activity" || h == "Activity") { for (var a in j) { if (!j[a]) { continue } if ((j[a].from().uiobject().props.Id.value == c && j[a].from().uiobject().type == "Activity") || (j[a].to().uiobject().props.Id.value == i && j[a].to().uiobject().type == "Activity")) { alert("活动只能存在一入一出的连接"); d = false; break } } } else { } } } } } for (var a in j) { if (!j[a]) { continue } if ((j[a].from().uiobject().props.Id.value == c && j[a].to().uiobject().props.Id.value == i) || (j[a].to().uiobject().props.Id.value == c && j[a].from().uiobject().props.Id.value == i)) { alert("从'" + e.text() + "'到'" + f.text() + "'连接已经存在"); d = false; break } } return d } (function (b) { var a = b.myflow; b.extend(true, a.config.rect, { attr: { r: 8, fill: "#F6F7FF", stroke: "#03689A", "stroke-width": 2, cursor: "pointer" }, dbclick: function (c, d) { if (c.type == "Activity" && showTaskDialog) { showTaskDialog(c.props.DisplayName.value, c.props.Id.value) } } }); b.extend(true, a.config.path.props, { Id: { name: "Id", label: "标识", value: "Transition", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "", editor: function () { return new a.editors.hiddenEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }, Condition: { name: "Condition", label: "触发条件", value: "", editor: function () { return new a.editors.inputEditor() } } }); b.extend(true, a.config.props.props, { Id: { name: "Id", label: "标识", value: "", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "新建流程", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "显示名称", value: "", editor: function () { return new a.editors.inputEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }, TaskInstanceCreator: { name: "TaskInstanceCreator", label: "全局任务启动器", value: "", editor: function () { return new a.editors.inputEditor() } } }); b.extend(true, a.config.tools.states, { StartNode: { showType: "image", type: "StartNode", name: { text: "StartNode" }, text: { text: "开始" }, img: { src: rooturl + "Content/Images/48/start_event_empty.png", width: 48, height: 48 }, attr: { width: 50, heigth: 50 }, props: { Id: { name: "Id", label: "标识", value: "Process.StartNode", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "StartNode", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "显示名称", value: "开始", editor: function () { return new a.editors.inputEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }} }, EndNode: { showType: "image", type: "EndNode", name: { text: "EndNode" }, text: { text: "结束" }, img: { src: rooturl + "Content/Images/48/end_event_terminate.png", width: 48, height: 48 }, attr: { width: 50, heigth: 50 }, props: { Id: { name: "Id", label: "标识", value: "Process.EndNode", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "EndNode", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "结束", value: "", editor: function () { return new a.editors.inputEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }} }, Activity: { showType: "text", type: "Activity", name: { text: "Activity" }, text: { text: "新建活动" }, img: { src: rooturl + "Content/Images/48/task_empty.png", width: 48, height: 48 }, props: { Id: { name: "Id", label: "标识", value: "Process.Activity", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "Activity", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "显示名称", value: "新建活动", editor: function () { return new a.editors.inputEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }, CompletionStrategy: { name: "CompletionStrategy", label: "结束策略", value: "ALL", editor: function () { return new a.editors.selectEditor([{ name: "任意一个任务结束", value: "ANY" }, { name: "全部任务结束", value: "ALL"}]) } }, tasks: { name: "tasks", label: "任务设置", value: "", editor: function () { return new a.editors.taskEditor() } }} }, FORMActivity: { showType: "image&text", type: "Activity", uitype: "TOOLActivity", name: { text: "FORMActivity" }, text: { text: "表单活动" }, img: { src: rooturl + "Content/Images/48/task_form.png", width: 48, height: 48 }, props: { Id: { name: "Id", label: "标识", value: "Process.Activity", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "Activity", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "显示名称", value: "表单活动", editor: function () { return new a.editors.inputEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }, CompletionStrategy: { name: "CompletionStrategy", label: "结束策略", value: "ALL", editor: function () { return new a.editors.selectEditor([{ name: "任意一个任务结束", value: "ANY" }, { name: "全部任务结束", value: "ALL"}]) } }, tasks: { name: "tasks", label: "任务设置", value: "", editor: function () { return new a.editors.taskEditor() } } }, attr: { width: 90, height: 80, r: 5, fill: "90-#fff-#4256B5", stroke: "#000", "stroke-width": 1 }, callback: function (c) { addnewTask(c, "FORM") } }, TOOLActivity: { showType: "image&text", type: "Activity", uitype: "TOOLActivity", name: { text: "ToolActivity" }, text: { text: "工具活动" }, img: { src: rooturl + "Content/Images/48/task_tool.png", width: 48, height: 48 }, props: { Id: { name: "Id", label: "标识", value: "Process.Activity", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "Activity", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "显示名称", value: "工具活动", editor: function () { return new a.editors.inputEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }, CompletionStrategy: { name: "CompletionStrategy", label: "结束策略", value: "ALL", editor: function () { return new a.editors.selectEditor([{ name: "全部任务结束", value: "ALL" }, { name: "任意一个任务结束", value: "ANY"}]) } }, tasks: { name: "tasks", label: "任务设置", value: "", editor: function () { return new a.editors.taskEditor() } } }, attr: { width: 90, height: 80, r: 5, fill: "90-#fff-#71EE4E", stroke: "#71EE4F", "stroke-width": 1 }, callback: function (c) { addnewTask(c, "TOOL") } }, SUBFLOWActivity: { showType: "image&text", type: "Activity", uitype: "SUBFLOWActivity", name: { text: "SubFlowActivity" }, text: { text: "子流程活动" }, img: { src: rooturl + "Content/Images/48/task_subflow.png", width: 48, height: 48 }, props: { Id: { name: "Id", label: "标识", value: "Process.Activity", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "Activity", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "显示名称", value: "子流程活动", editor: function () { return new a.editors.inputEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }, CompletionStrategy: { name: "CompletionStrategy", label: "结束策略", value: "ALL", editor: function () { return new a.editors.selectEditor([{ name: "全部任务结束", value: "ALL" }, { name: "任意一个任务结束", value: "ANY"}]) } }, tasks: { name: "tasks", label: "任务设置", value: "", editor: function () { return new a.editors.taskEditor() } } }, attr: { width: 90, height: 80, r: 5, fill: "90-#fff-#021392", stroke: "#4256B5", "stroke-width": 1 }, callback: function (c) { addnewTask(c, "SUBFLOW") } }, SkipActivity: { showType: "text", type: "Activity", uitype: "SkipActivity", name: { text: "Skip" }, text: { text: "跳过" }, img: { src: rooturl + "Content/Images/48/task_empty.png", width: 48, height: 48 }, props: { Id: { name: "Id", label: "标识", value: "Process.Activity", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "Activity", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "显示名称", value: "跳过", editor: function () { return new a.editors.inputEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.inputEditor() } }, CompletionStrategy: { name: "CompletionStrategy", label: "结束策略", value: "ALL", editor: function () { return new a.editors.selectEditor([{ name: "全部任务结束", value: "ALL" }, { name: "任意一个任务结束", value: "ANY"}]) } }, tasks: { name: "tasks", label: "任务设置", value: "", editor: function () { return new a.editors.taskEditor() } } }, attr: { width: 30, height: 20, r: 5, fill: "90-#fff-#fff", stroke: "#4256B5", "stroke-width": 1 }, showText: function (e, f, d) { e.text.text = e.props.DisplayName.value = "跳过" } }, Synchronizer: { showType: "image", type: "Synchronizer", name: { text: "Synchronizer" }, text: { text: "转发点" }, img: { src: rooturl + "Content/Images/48/gateway_Synchronizer.png", width: 32, height: 32 }, attr: { width: 32, heigth: 32 }, props: { Id: { name: "Id", label: "标识", value: "Process.EndNode", editor: function () { return new a.editors.hiddenEditor() } }, Name: { name: "Name", label: "名称", value: "EndNode", editor: function () { return new a.editors.hiddenEditor() } }, DisplayName: { name: "DisplayName", label: "显示名称", value: "", editor: function () { return new a.editors.hiddenEditor() } }, Description: { name: "Description", label: "描述", value: "", editor: function () { return new a.editors.hiddenEditor() } }}} }) })(jQuery); (function ($) { var myflow = $.myflow; $.extend(true, myflow.editors, { inputEditor: function () { var _props, _k, _div, _src, _r; this.init = function (props, k, div, src, r) { _props = props; _k = k; _div = div; _src = src; _r = r; $('<input style=""/>').val(props[_k].value).change(function () { if (_k == "DisplayName" && _src.setText) { _src.setText($(this).val()); $(this).parents("table").find("#ptext").find("input").val($(this).val()) } props[_k].value = $(this).val() }).appendTo("#" + _div); $("#" + _div).data("editor", this) }; this.destroy = function () { $("#" + _div + " input").each(function () { _props[_k].value = $(this).val() }) } }, readonlyEditor: function () { var _props, _k, _div, _src, _r; this.init = function (props, k, div, src, r) { _props = props; _k = k; _div = div; _src = src; _r = r; $("<label>" + props[_k].value + "</label>").appendTo("#" + _div); $("#" + _div).data("editor", this) }; this.destroy = function () { } }, hiddenEditor: function () { var _props, _k, _div, _src, _r; this.init = function (props, k, div, src, r) { _props = props; _k = k; _div = div; _src = src; _r = r; $("#" + _div).parent().parent().hide(); $("#" + _div).data("editor", this) }; this.destroy = function () { } }, taskEditor: function () { var _props, _k, _div, _src, _r; this.init = function (props, k, div, src, r) { _props = props; _k = k; _div = div; _src = src; _r = r; $('<input  type="button" value="设置"/>').change(function () { props[_k].value = $(this).val() }).click(function () { showTaskDialog(props.DisplayName.value, props.Id.value) }).appendTo("#" + _div); $("#" + _div).data("editor", this) }; this.destroy = function () { $("#" + _div + " input").each(function () { _props[_k].value = $(this).val() }) } }, selectEditor: function (arg) { var _props, _k, _div, _src, _r; this.init = function (props, k, div, src, r) { _props = props; _k = k; _div = div; _src = src; _r = r; var sle = $("<select/>").val(props[_k].value).change(function () { props[_k].value = $(this).val() }).appendTo("#" + _div); if (typeof arg === "string") { $.ajax({ type: "GET", url: arg, success: function (data) { var opts = eval(data); if (opts && opts.length) { for (var idx = 0; idx < opts.length; idx++) { sle.append('<option value="' + opts[idx].value + '">' + opts[idx].name + "</option>") } sle.val(_props[_k].value) } } }) } else { for (var idx = 0; idx < arg.length; idx++) { sle.append('<option value="' + arg[idx].value + '">' + arg[idx].name + "</option>") } sle.val(_props[_k].value) } $("#" + _div).data("editor", this) }; this.destroy = function () { $("#" + _div + " input").each(function () { _props[_k].value = $(this).val() }) } } }) })(jQuery); function fpdlFormatter(g) { var d = ""; d += '<?xml version="1.0" encoding="utf-8" standalone="yes"?>'; d += '<fpdl:WorkflowProcess xmlns:fpdl="http://www.fireflow.org/Fireflow_Process_Definition_Language" Id="' + g.props.props.Id.value + '" Name="' + g.props.props.Name.value + '" DisplayName="' + g.props.props.DisplayName.value + '" ResourceFile="" ResourceManager="" TaskInstanceCreator="' + g.props.props.TaskInstanceCreator.value + '">'; var m = getSepcialStates(g.states, "StartNode")[0]; if (m) { d += '<fpdl:StartNode Id="' + m.props.Id.value + '" Name="' + m.props.Name.value + '" DisplayName="' + m.props.DisplayName.value + '">'; d = renderUIExtAttr(d, m); d += "</fpdl:StartNode>"; delete m } var f = getSepcialStates(g.states, "EndNode"); if (f) { d += "<fpdl:EndNodes>"; for (var l in f) { d += '<fpdl:EndNode Id="' + f[l].props.Id.value + '" Name="' + f[l].props.Name.value + '" DisplayName="' + f[l].props.DisplayName.value + '">'; d = renderUIExtAttr(d, f[l]); d += "</fpdl:EndNode>" } d += "</fpdl:EndNodes>"; delete f } var e = getSepcialStates(g.states, "Activity"); d += "<fpdl:Activities>"; for (var l in e) { if (!l) { continue } d += '<fpdl:Activity Id="' + e[l].props.Id.value + '" Name="' + e[l].props.Name.value + '" DisplayName="' + e[l].props.DisplayName.value + '" CompletionStrategy="' + e[l].props.CompletionStrategy.value + '">'; var n = getTasksFormJsonData("Activity", e[l].props.Id.value); if (n && n.tasks && n.tasks.length > 0) { d += "<fpdl:Tasks>"; for (var j in n.tasks) { d += '<fpdl:Task Id="' + n.tasks[j].Id.value + '" Name="' + n.tasks[j].Name.value + '" DisplayName="' + n.tasks[j].DisplayName.value + '"'; d += ' TaskInstanceCreator="' + n.tasks[j].TaskInstanceCreator.value + '" '; d += ' TaskInstanceRunner="' + n.tasks[j].TaskInstanceRunner.value + '" '; d += ' TaskInstanceCompletionEvaluator="' + n.tasks[j].TaskInstanceCompletionEvaluator.value + '" '; if (n.tasks[j].Type.value == "FORM" && n.tasks[j].CompletionStrategy) { d += ' CompletionStrategy="' + n.tasks[j].CompletionStrategy.value + '" ' } if (n.tasks[j].Type.value == "FORM" && n.tasks[j].DefaultView) { d += ' DefaultView="' + n.tasks[j].DefaultView + '"' } d += ' Type="' + n.tasks[j].Type.value + '" LoopStrategy="' + n.tasks[j].LoopStrategy.value + '" Priority="' + n.tasks[j].Priority.value + '">'; d += "<fpdl:Description>" + n.tasks[j].Description.value + "</fpdl:Description>"; if (n.tasks[j].Performer) { d += '<fpdl:Performer Name="' + n.tasks[j].Performer.Name + '" DisplayName="' + n.tasks[j].Performer.DisplayName + '" AssignmentType="' + n.tasks[j].Performer.AssignmentType + '">'; d += "<fpdl:Description>" + n.tasks[j].Performer.Description + "</fpdl:Description>"; d += "<fpdl:AssignmentHandler>" + n.tasks[j].Performer.AssignmentHandler + "</fpdl:AssignmentHandler>"; d += "<fpdl:AssignmentType>" + n.tasks[j].Performer.AssignmentType + "</fpdl:AssignmentType>"; d += "<fpdl:PerformerValue><![CDATA[" + n.tasks[j].Performer.PerformerValue + "]]></fpdl:PerformerValue>"; d += "</fpdl:Performer>" } var c; if (n.tasks[j].EditForm) { c = n.tasks[j].EditForm; d += '<fpdl:EditForm Name="' + c.Name + '" DisplayName="' + c.DisplayName + '">'; d += "<fpdl:Description>" + c.Description + "</fpdl:Description>"; d += "<fpdl:Uri>" + c.Uri + "</fpdl:Uri>"; d += "<fpdl:UIScript>" + (c.UIScript ? "<![CDATA[" + c.UIScript + "]]>" : "") + "</fpdl:UIScript>"; d += "<fpdl:UIControl>" + (c.UIControl ? "<![CDATA[" + c.UIControl + "]]>" : "") + "</fpdl:UIControl>"; d += "</fpdl:EditForm>" } if (n.tasks[j].ListForm) { c = n.tasks[j].ListForm; d += '<fpdl:ListForm Name="' + c.Name + '" DisplayName="' + c.DisplayName + '">'; d += "<fpdl:Description>" + c.Description + "</fpdl:Description>"; d += "<fpdl:Uri>" + c.Uri + "</fpdl:Uri>"; d += "<fpdl:UIScript>" + (c.UIScript ? "<![CDATA[" + c.UIScript + "]]>" : "") + "</fpdl:UIScript>"; d += "<fpdl:UIControl>" + (c.UIControl ? "<![CDATA[" + c.UIControl + "]]>" : "") + "</fpdl:UIControl>"; d += "</fpdl:ListForm>" } if (n.tasks[j].ViewForm) { c = n.tasks[j].ViewForm; d += '<fpdl:ViewForm Name="' + c.Name + '" DisplayName="' + c.DisplayName + '">'; d += "<fpdl:Description>" + c.Description + "</fpdl:Description>"; d += "<fpdl:Uri>" + c.Uri + "</fpdl:Uri>"; d += "<fpdl:UIScript>" + (c.UIScript ? "<![CDATA[" + c.UIScript + "]]>" : "") + "</fpdl:UIScript>"; d += "<fpdl:UIControl>" + (c.UIControl ? "<![CDATA[" + c.UIControl + "]]>" : "") + "</fpdl:UIControl>"; d += "</fpdl:ViewForm>" } if (n.tasks[j].Duration) { d += '<fpdl:Duration Value="' + n.tasks[j].Duration.Value + '" Unit="' + n.tasks[j].Duration.Unit + '" IsBusinessTime="' + n.tasks[j].Duration.IsBusinessTime + '">'; d += "<fpdl:Description>" + n.tasks[j].ViewForm.Description + "</fpdl:Description>"; d += "<fpdl:Uri>" + n.tasks[j].ViewForm.Uri + "</fpdl:Uri>"; d += "</fpdl:Duration>" } if (n.tasks[j].Application) { d += '<fpdl:Application Name="' + n.tasks[j].Application.Name + '" DisplayName="' + n.tasks[j].Application.DisplayName + '">'; d += "<fpdl:Description>" + n.tasks[j].Application.Description + "</fpdl:Description>"; d += "<fpdl:Handler>" + n.tasks[j].Application.Handler + "</fpdl:Handler>"; d += "<fpdl:Parameters><![CDATA[" + n.tasks[j].Application.Parameters + "]]></fpdl:Parameters>"; d += "</fpdl:Application>" } if (n.tasks[j].Type.value == "SUBFLOW" && n.tasks[j].SubWorkflowProcess) { d += '<fpdl:SubWorkflowProcess Name="' + n.tasks[j].SubWorkflowProcess.Name + '" DisplayName="' + n.tasks[j].SubWorkflowProcess.DisplayName + '">'; d += "<fpdl:Description>" + n.tasks[j].SubWorkflowProcess.Description + "</fpdl:Description>"; d += "<fpdl:WorkflowProcessId>" + n.tasks[j].SubWorkflowProcess.WorkflowProcessId + "</fpdl:WorkflowProcessId>"; d += "</fpdl:SubWorkflowProcess>" } d += "</fpdl:Task>" } d += "</fpdl:Tasks>" } d = renderUIExtAttr(d, e[l]); d += "</fpdl:Activity>" } d += "</fpdl:Activities>"; var h = getSepcialStates(g.states, "Synchronizer"); if (h) { d += "<fpdl:Synchronizers>"; for (var l in h) { d += '<fpdl:Synchronizer Id="' + h[l].props.Id.value + '" Name="' + h[l].props.Name.value + '" DisplayName="' + h[l].props.DisplayName.value + '">'; d = renderUIExtAttr(d, h[l]); d += "</fpdl:Synchronizer>" } d += "</fpdl:Synchronizers>"; delete h } var k = g.paths; if (k) { d += "<fpdl:Transitions>"; for (var l in k) { d += '<fpdl:Transition Id="' + k[l].props.Id.value + '" Name="' + k[l].props.Name.value + '" DisplayName="' + k[l].text.text + '"  From="' + g.states[k[l].from].props.Id.value + '"  To="' + g.states[k[l].to].props.Id.value + '">'; d += "<fpdl:Condition><![CDATA[" + k[l].props.Condition.value + "]]></fpdl:Condition>"; d += "<fpdl:ExtendedAttributes>"; if (k[l].dots && k[l].dots.length > 0) { d += '<fpdl:ExtendedAttribute Name="FIRE_FLOW.edgePointList" Value="'; for (var i in k[l].dots) { d += "(" + k[l].dots[i].x + "," + k[l].dots[i].y + ")" } d += '"/>' } if (k[l].textPos) { d += '<fpdl:ExtendedAttribute Name="FIRE_FLOW.labelPosition" Value="(' + k[l].textPos.x + "," + k[l].textPos.y + ')"/>' } d += "</fpdl:ExtendedAttributes>"; d += "</fpdl:Transition>" } d += "</fpdl:Transitions>" } delete e; delete k; d += "</fpdl:WorkflowProcess>"; return d } function getTasksFormJsonData(a, c) { for (var b in jsondata.states) { if (jsondata.states[b].type == a && jsondata.states[b].props.Id.value == c) { return jsondata.states[b] } } return null } function renderUIExtAttr(b, a) { b += "<fpdl:ExtendedAttributes>"; b += '<fpdl:ExtendedAttribute Name="FIRE_FLOW.bounds.x" Value="' + a.attr.x + '"/>'; b += '<fpdl:ExtendedAttribute Name="FIRE_FLOW.bounds.y" Value="' + a.attr.y + '"/>'; b += '<fpdl:ExtendedAttribute Name="FIRE_FLOW.bounds.width" Value="' + a.attr.width + '"/>'; b += '<fpdl:ExtendedAttribute Name="FIRE_FLOW.bounds.height" Value="' + a.attr.height + '"/>'; b += "</fpdl:ExtendedAttributes>"; return b } function getSepcialStates(b, c) { var a = []; for (var d in b) { if (b[d].type == c) { a.push(b[d]) } } return a } function Task() { return {} } function ShowTaskPanel(a) { if (a == "FORM" || a == "TOOL") { $("#DurationPanel").show() } else { $("#DurationPanel").hide() } $("#FORMTask, #TOOLTask,#SUBFLOWTask").hide(); $("#" + a + "Task").show() } function getTaskIndex(c) { var b = getTasksFormJsonData("Activity", hiddenActId); var a = 0; for (a in b.tasks) { if (b.tasks[a].Id.value == c) { break } } return { index: a, data: b} } function ShowPerfomerDialog() { var b = getTaskIndex(hiddenTaskId); var c = b.index; var h = b.data; if (h.tasks[c].Performer) { var a, d, e, f, j, g; if (h.tasks[c].Performer) { a = h.tasks[c].Performer.Name; d = h.tasks[c].Performer.DisplayName; f = h.tasks[c].Performer.AssignmentType; j = h.tasks[c].Performer.AssignmentHandler; g = h.tasks[c].Performer.PerformerValue; e = h.tasks[c].Performer.Description } $("#PerformerName").val(a ? a : "Performer"); $("#PerformerDisplayName").val(d ? d : "操作员"); $("#AssignmentHandler").val(j ? j : defaulthandler); $("#AssignmentType").val(f); $("#PerformerValue").val(g); $("#PerformerDescription").val(e) } else { $("#PerformerName").val("Performer"); $("#PerformerDisplayName").val(""); $("#AssignmentHandler").val(""); $("#AssignmentType").val(""); $("#PerformerValue").val(""); $("#PerformerDescription").val("") } performerwin.window("open") } function savePerformer() { var b = getTaskIndex(hiddenTaskId); var c = b.index; var h = b.data; if (!h.tasks[c].Performer) { h.tasks[c].Performer = { Name: "Performer", DisplayName: "操作员", Description: "", AssignmentHandler: "", AssignmentType: "", PerformerValue: ""} } var a = $("#PerformerName").val(); var d = $("#PerformerDisplayName").val(); var j = $("#AssignmentHandler").val(); var f = $("#AssignmentType").val(); var g = $("#PerformerValue").val(); var e = $("#PerformerDescription").val(); h.tasks[c].Performer.Name = a; h.tasks[c].Performer.DisplayName = d; h.tasks[c].Performer.Description = e; h.tasks[c].Performer.AssignmentHandler = j; h.tasks[c].Performer.AssignmentType = f; h.tasks[c].Performer.PerformerValue = g; $("#Performer").val(h.tasks[c].Performer.DisplayName + " , " + h.tasks[c].Performer.Name); performerwin.window("close") } var returnValue; function ShowUserDialog() { SetWin(510, 640, baseurl + "/UserMgmtSelector", "参与者选择") } function setUserSelection(a) { $("#PerformerValue").val(a) } function getFormTypeText(a) { switch (a) { case "EDIT": return "编辑表单"; case "LIST": return "列表表单"; case "VIEW": return "只读表单" } } function ShowFormDialog(j) { formwin.window("open"); var d = getTaskIndex(hiddenTaskId); var f = d.index; var l = d.data; var a, g, c, k, h, e, b; if (j == "EDIT" && l.tasks[f].EditForm) { b = l.tasks[f].EditForm } else { if (j == "LIST" && l.tasks[f].ListForm) { b = l.tasks[f].ListForm } else { if (j == "VIEW" && l.tasks[f].ViewForm) { b = l.tasks[f].ViewForm } } } a = b.Name; g = b.DisplayName; c = b.Uri; $("#formlist").val(c); h = b.UIScript ? b.UIScript : ""; e = b.UIControl ? b.UIControl : ""; k = b.Description; $("#FormName").val(a ? a : l.props.Id.value + "表单"); $("#FormDisplayName").val(a ? a : l.props.DisplayName.value + getFormTypeText(j)); $("#FormUri").val(c); $("#FormUIScript").val(h); $("#FormUIControl").val(e); $("#FormDescription").val(k); if (e) { loadUIControlData({ total: 0, rows: strToJson(e) }) } else { loadUIControlData({ total: 0, rows: [] }) } $(formwin).data("type", j) } function setForm(f) { if (getUIControlData) { $("#FormUIControl").val(getUIControlData()) } var c = $("#FormName").val(); var d = $("#FormDisplayName").val(); var e = $("#FormUri").val(); var b = $("#FormDescription").val(); var a = $("#FormUIScript").val(); var g = $("#FormUIControl").val(); f.Name = c; f.DisplayName = d; f.Uri = e; f.UIScript = a; f.UIControl = g; f.Description = b } function saveForm() { var b = getTaskIndex(hiddenTaskId); var c = b.index; var e = b.data; var d = $(formwin).data("type"); var a = { Name: "", DisplayName: "", Uri: "", Description: "", UIScript: "", UIControl: "" }; if (d == "EDIT") { if (!e.tasks[c].EditForm) { e.tasks[c].EditForm = a } setForm(e.tasks[c].EditForm); $("#EditFormDetail").val(e.tasks[c].EditForm.DisplayName + " , " + e.tasks[c].EditForm.Uri) } else { if (d == "LIST") { if (!e.tasks[c].ListForm) { e.tasks[c].ListForm = a } setForm(e.tasks[c].ListForm); $("#ListFormDetail").val(e.tasks[c].ListForm.DisplayName + " , " + e.tasks[c].ListForm.Uri) } else { if (d == "VIEW") { if (!e.tasks[c].ViewForm) { e.tasks[c].ViewForm = a } setForm(e.tasks[c].ViewForm); $("#ViewFormDetail").val(e.tasks[c].ViewForm.DisplayName + " , " + e.tasks[c].ViewForm.Uri) } } } formwin.window("close") } function addnewTask(e, b) { var d = getTasksFormJsonData("Activity", e); var f = d.tasks && d.tasks.length ? d.tasks.length : 0; var a = e + "_" + b + "Task_" + (f + 1); if (!d.tasks) { d.tasks = [] } var c = { Id: { value: a }, Name: { value: b + "Task_" + (f + 1) }, DisplayName: { value: "新建任务" }, Description: { value: "" }, Type: { value: b }, LoopStrategy: { value: "REDO" }, TaskInstanceCreator: { value: "" }, TaskInstanceRunner: { value: "" }, TaskInstanceCompletionEvaluator: { value: "" }, Priority: { value: "1" }, CompletionStrategy: { value: "ANY" }, DefaultView: "EDITFORM", Performer: { Name: "", DisplayName: "", Description: "", AssignmentType: "Handler", AssignmentHandler: "", PerformerValue: "" }, EditForm: { Name: "", DisplayName: "", Uri: "", Description: ""} }; d.tasks.push(c); return c } function loadData(c) { $("#TaskForm").tabs("select", 0); if (hiddenTaskId) { var a = getTaskIndex(hiddenTaskId); var b = a.index; var e = a.data; $("#TaskName").val(e.tasks[b].Name.value); $("#TaskId").val(e.tasks[b].Id.value); $("#TaskDisplayName").val(e.tasks[b].DisplayName.value); $("#TaskDescn").val(e.tasks[b].Description.value); $("#TaskInstanceCreator").val(e.tasks[b].TaskInstanceCreator.value); $("#TaskInstanceRunner").val(e.tasks[b].TaskInstanceRunner.value); $("#TaskInstanceCompletionEvaluator").val(e.tasks[b].TaskInstanceCompletionEvaluator.value); $("#LoopStrategy").val(e.tasks[b].LoopStrategy.value); if (e.tasks[b].Duration) { $("#Duration").val(e.tasks[b].Duration.Value); $("#IsBusinessTime").attr("checked", e.tasks[b].Duration.IsBusinessTime == "TRUE"); $("#Unit").val(e.tasks[b].Duration.Unit) } if (c == "FORM") { if (e.tasks[b].Performer) { $("#Performer").val(e.tasks[b].Performer.DisplayName + " , " + e.tasks[b].Performer.Name) } if (e.tasks[b].EditForm) { $("#EditFormDetail").val(e.tasks[b].EditForm.DisplayName + " , " + e.tasks[b].EditForm.Uri) } if (e.tasks[b].ListForm) { $("#ListFormDetail").val(e.tasks[b].ListForm.DisplayName + " , " + e.tasks[b].ListForm.Uri) } if (e.tasks[b].ViewForm) { $("#ViewFormDetail").val(e.tasks[b].ViewForm.DisplayName + " , " + e.tasks[b].ViewForm.Uri) } } else { if (c == "TOOL") { if (e.tasks[b].Application) { $("#AppName").val(e.tasks[b].Application.Name); $("#AppDisplayName").val(e.tasks[b].Application.DisplayName); $("#Handler").val(e.tasks[b].Application.Handler); $("#Parameters").val(e.tasks[b].Application.Parameters); $("#AppDescription").val(e.tasks[b].Application.Description); $("#toollist").val(e.tasks[b].Application.Handler) } if ($("#AppName").val() == "") { $("#AppName").val(hiddenTaskId + ".TASKAPP") } } else { if (c == "SUBFLOW") { if (e.tasks[b].SubWorkflowProcess) { $("#SubFlowName").val(e.tasks[b].SubWorkflowProcess.Name); $("#SubFlowDisplayName").val(e.tasks[b].SubWorkflowProcess.DisplayName); $("#WorkflowProcessId").val(e.tasks[b].SubWorkflowProcess.WorkflowProcessId); $("#SubFlowDescription").val(e.tasks[b].SubWorkflowProcess.Description) } } } } } else { var d = addnewTask(hiddenActId, c); $("#TaskName").val(d.Name.value); $("#TaskId").val(newid); $("#TaskDisplayName").val(d.DisplayName.value); $("#TaskDescn").val(""); $("#TaskInstanceCreator").val(""); $("#TaskInstanceRunner").val(""); $("#TaskInstanceCompletionEvaluator").val(""); $("#LoopStrategy").val(""); $("#Duration").val(""); $("#IsBusinessTime").attr("checked", false); $("#Unit").val(""); $("#AppName").val(newid + ".TASKAPP"); $("#AppDisplayName").val(""); $("#Handler").val(""); $("#Parameters").val(""); $("#AppDescription").val(""); $("#SubFlowName").val(""); $("#SubFlowDisplayName").val(""); $("#WorkflowProcessId").val(""); $("#SubFlowDescription").val(""); $("#EditFormDetail").val(""); $("#ListFormDetail").val(""); $("#ViewFormDetail").val(""); $("#Performer").val(""); loadTaskGrid(hiddenActId) } $("#TaskForm").show(); $("#Buttons").show(); ShowTaskPanel(c) } function loadTaskGrid(e) { var b = getTasksFormJsonData("Activity", e); var d, c = { total: (b && b.tasks) ? b.tasks.length : 0, rows: [] }; hiddenActId = e; for (var a in b.tasks) { d = { Name: b.tasks[a].Name.value, DisplayName: b.tasks[a].DisplayName.value, Id: b.tasks[a].Id.value, Type: b.tasks[a].Type.value }; c.rows.push(d) } $("#TaskGrid").datagrid("loadData", c); if (c.rows.length > 0) { hiddenTaskId = c.rows[0].Id; loadData(c.rows[0].Type) } } function showTaskDialog(a, b) { hiddenTaskId = -1; $("#TaskForm").hide(); $("#Buttons").hide(); loadTaskGrid(b); taskwin.window("setTitle", a + "-任务编辑"); taskwin.window("open") } function saveTask() { var b = getTaskIndex(hiddenTaskId); var c = b.index; var d = b.data; var a = d.tasks[c]; a.Id.value = $("#TaskId").val(); a.Name.value = $("#TaskName").val(); a.DisplayName.value = $("#TaskDisplayName").val(); a.Description.value = $("#TaskDescn").val(); a.TaskInstanceCreator.value = $("#TaskInstanceCreator").val(); a.TaskInstanceRunner.value = $("#TaskInstanceRunner").val(); a.TaskInstanceCompletionEvaluator.value = $("#TaskInstanceCompletionEvaluator").val(); a.LoopStrategy.value = $("#LoopStrategy").val(); if (a.Type == "TOOL" || a.Type == "FORM") { a.Duration = { Value: $("#Duration").val(), Unit: $("#Unit").val(), IsBusinessTime: $("#IsBusinessTime").attr("checked")} } else { a.Duration = null } if (a.Type.value == "FORM") { a.CompletionStrategy.value = $("#CompletionStrategy").val(); a.DefaultView = $("#DefaultView").val() } else { if (a.Type.value == "TOOL") { a.Application = { Name: $("#AppName").val(), DisplayName: $("#AppDisplayName").val(), Handler: $("#Handler").val(), Description: $("#AppDescription").val(), Parameters: $("#Parameters").val()} } else { if (a.Type.value == "SUBFLOW") { a.Application = { Name: $("#SubFlowName").val(), SubFlowDisplayName: $("#SubFlowDisplayName").val(), WorkflowProcessId: $("#WorkflowProcessId").val(), SubFlowDescription: $("#SubFlowDescription").val()} } } } d.tasks[c] = a; setTimeout("MsgShow('系统提示','任务修改成功。');", 1000); taskwin.window("close") } function deleteTasks() { $.messager.confirm("Question", "确定要删除任务?", function (c) { if (c) { var a = getTaskIndex(hiddenTaskId); var b = a.index; var d = a.data; delete d.tasks[b]; loadTaskGrid(hiddenActId); $("#TaskForm").hide() } }) } function loadCustomFormColumns() { } function save() { $.ajax({ type: "post", url: baseurl + "/DesignWorkFlow?t=" + new Date().toString(), data: { id: currid, ProcessContent: $("#output").val(), SaveAsNewVer: $("#SaveAsNewVer:checked").val(), IsRelease: $("#IsRelease:checked").val() }, dataType: "text", success: function (a) { var b = a.split(":"); if (b[0] == "1") { alert("保存成功"); if ($("#SaveAsNewVer").attr("checked")) { window.location.href = baseurl + "/DesignWorkFlow?id=" + b[1] } else { savewin.window("close") } } else { alert(a) } } }) } var hiddenActId, hiddenTaskId; var taskwin, formwin, performerwin, savewin; var flow; $(function () { var flowdesigner = $("#myflow").myflow({ basePath: "", restore: jsondata, tools: { save: { onclick: function (data) { var json = eval("(" + data + ")"); var startnode = getSepcialStates(json.states, "StartNode"); var endnodes = getSepcialStates(json.states, "EndNode"); var activities = getSepcialStates(json.states, "Activity"); var synchronizers = getSepcialStates(json.states, "Synchronizer"); if (!startnode || endnodes.length == 0 || activities.length == 0) { alert("流程至少具有开始一个开始节点,一个结束节点及一个活动"); return } else { var count = activities.length + endnodes.length + (synchronizers ? synchronizers.length : 0) + 1; var pathcount = 0; for (var m in json.paths) { pathcount++ } if (pathcount < (count - 1)) { alert("请检查是否有图形未进行连线"); return } } var output = fpdlFormatter(json); $("#output").val(output); save() } }, xml: { onclick: function (data) { var output = fpdlFormatter(eval("(" + data + ")")); $("#output").val(output); $("#output").select(); $("#ViewXML").window("open") } } }, addRectHandler: function (rect) { jsondata.states[rect.props.Id.value] = rect }, removeRectHandler: function (id) { jsondata.states[id] = null; delete jsondata.states[id] }, addPatHhandler: function (rect) { jsondata.paths[rect.props.Id.value] = rect }, removePathHandler: function (id) { jsondata.paths[id] = null; delete jsondata.paths[id] } }); var windowWidth = document.documentElement.clientWidth; var windowHeight = document.documentElement.clientHeight; var h = 600, w = 800; taskwin = $("#myflow_taskconfig"); taskwin.window({ title: "活动-任务属性配置", width: w, modal: true, shadow: true, closed: true, top: Math.max(0, (windowHeight - h) / 4), left: Math.max(0, (windowWidth - w) / 3), height: h, resizable: false }); formwin = $("#FromEditor"); var fh = 530, fw = 500; formwin.window({ title: "表单设置", width: fw, modal: true, shadow: true, closed: true, top: Math.max(0, (windowHeight - fh) / 4), left: Math.max(0, (windowWidth - fw) / 3), height: fh, resizable: false }); $("#saveForm").click(saveForm); $("#cancelForm").click(function () { formwin.window("close") }); performerwin = $("#PerformerEditor"); var ph = 270, pw = 500; performerwin.window({ title: "任务参与者设置", width: pw, modal: true, shadow: true, closed: true, top: Math.max(0, (windowHeight - ph) / 4), left: Math.max(0, (windowWidth - pw) / 3), height: ph, resizable: false }); $("#savePerformer").click(savePerformer); $("#cancelPerformer").click(function () { performerwin.window("close") }); savewin = $("#SaveWindow"); var sh = 160, sw = 250; savewin.window({ title: "保存流程设计", width: sw, modal: true, shadow: true, closed: true, top: Math.max(0, (windowHeight - ph) / 2), left: Math.max(0, (windowWidth - pw) / 2), height: sh, resizable: false }); $("#popSaveWin").click(function () { savewin.window("open") }); $("#cancelSave").click(function () { savewin.window("close") }); $("#saveTask").click(saveTask); $("#myflow_props").window({ title: "属性", modal: false, shadow: false, closed: false }); $("#myflow_props").parent().css("left", windowWidth - $("#myflow_props").parent().css("width").replace("px", "") - 20); $("#myflow_props").parent().css("top", 10); $("#TaskForm,#FORMTask, #TOOLTask,#SUBFLOWTask").hide(); $("#TaskGrid").datagrid({ nowrap: false, striped: true, fit: true, border: false, queryParams: {}, columns: [[{ field: "ck", checkbox: true }, { field: "Name", title: "流程代码", width: 80 }, { field: "DisplayName", title: "显示名称", width: 100 }, { field: "Type", title: "类型", width: 70, align: "center", formatter: function (value, rec) { switch (value) { case "FORM": return "表单任务"; case "TOOL": return "工具任务"; case "SUBFLOW": return "子流程任务" } } }]], pagination: false, singleSelect: true, onClickRow: function (index, data) { if (index > -1) { if (hiddenTaskId != data.Id) { hiddenTaskId = data.Id; loadData(data.Type) } } }, toolbar: [{ text: "表单", iconCls: "icon-add", handler: function () { hiddenTaskId = ""; loadData("FORM") } }, { text: "工具", iconCls: "icon-add", handler: function () { hiddenTaskId = ""; loadData("TOOL") } }, { text: "子流程", iconCls: "icon-add", handler: function () { hiddenTaskId = ""; loadData("SUBFLOW") } }, "-", { text: "删除", iconCls: "icon-cut", handler: function () { deleteTasks() } }] }); $("#ViewXML").window({ width: 600, height: 600, title: "查看输出的XML", modal: false, shadow: false, closed: true, resizable: false }); HideLoading() });